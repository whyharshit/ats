# Import PromptTemplate for creating templates with placeholders
from langchain_core.prompts import PromptTemplate

# Import the ChatGPT model wrapper from LangChain
from langchain_google_genai import ChatGoogleGenerativeAI

# Import dotenv to load the API key securely from a .env file
from dotenv import load_dotenv

# Load environment variables (like your OpenAI API key from .env file)
load_dotenv()

# Create a ChatGPT model object (this uses your OpenAI key behind the scenes)

model = ChatGoogleGenerativeAI(
    model="models/gemini-1.5-flash-latest",temperature=0.5
   )

# Create a prompt template with a placeholder {name}
template2 = PromptTemplate(
    template='Greet this person in 5 languages. The name of the person is {name}',
    input_variables=['name']  # Tells LangChain that we will later pass 'name'
)

# Fill the placeholder {name} with the actual name 'nitish'
filled_prompt = template2.invoke({'name':"Nitish"})

# Send the completed prompt to the ChatGPT model and get the response
result = model.invoke(filled_prompt)

# Print the response generated by the model (greetings in 5 languages)
print(result.content)
